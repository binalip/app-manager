<%
//TODO : remove this and fix welcome page properly
//response.sendRedirect('.' + require('/store.js').config().assetsUrlPrefix + '/gadget');

var caramel;

include('/extensions/assets/webapp/modules/jagg/jagg.jag');

require('/modules/store.js').exec(function (ctx) {
    var paging, count, current, loggedUser, manager, assets, length, recentDiff,
            popularDiff, recent, popular, type, process,
            log = ctx.log,
            query = ctx.params.query,
            tag = ctx.params.tag,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            first = true,
            recentCount = 10,
            popularCount = 10,
            items = [],
            popularItems = [],
            recentItems = [],
            options = {},
            types = store.assetTypes(),
            search = require('/modules/search.js'),
            utility = require('/modules/util.js'),isSubscribed;

    caramel = require('caramel');
    process = require('process'),
    localIP = "https://" + process.getProperty('server.host'),
    httpsPort = process.getProperty('https.port');
    
    length = types.length;
    recent = Math.floor(recentCount / length);
    recentDiff = recentCount - recent * length;
    popular = Math.floor(popularCount / length);
    popularDiff = popularCount - popular * length;
    paging = store.assetsPaging(request);
    query = query ? search.build(String(query)) : null;





    // Init subscription service.
    var subscriptionServiceModule = require('/extensions/assets/webapp/services/subscription.js').serviceModule;
    var subscriptionService = new subscriptionServiceModule.SubscriptionService();
    subscriptionService.init(jagg, session);

    var getSubscriptionInfo = function (asset) {

        // Get the enterprise subscription the individual subscription for this user for this app.
        var appInfo = {};
        appInfo["name"] = asset.attributes.overview_name;
        appInfo["version"] = asset.attributes.overview_version;
        appInfo["provider"] = asset.attributes.overview_provider;

        var defaultApplicationName = "DefaultApplication";

        var enterpriseSubscription;
        if (authenticator.getLoggedInUser()) {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", authenticator.getLoggedInUser().username).subscription;
        }
        else {
            enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE", null).subscription;
        }

        var individualSubscription;
        if (authenticator.getLoggedInUser()) {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", authenticator.getLoggedInUser().username).subscription;
        }
        else {
            individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL", null).subscription;
        }


        // Get all available IDPs (enterprises)
        var enterprises = getEnterprises(asset);

        var subscriptionInfo = {};

        subscriptionInfo["enterpriseSubscription"] = enterpriseSubscription;
        subscriptionInfo["individualSubscription"] = individualSubscription;
        subscriptionInfo["enterprises"] = enterprises;
        subscriptionInfo["viewData"] = getSubscriptionViewData(enterpriseSubscription, enterprises);

        return subscriptionInfo;

    }

    // Returns HBS friendly subscription info.
    var getSubscriptionViewData = function (enterpriseSubscription, enterprises) {

        var viewData = new Array();

        if (!enterprises) {
            return viewData;
        }

        // Create a Set of trusted IDPs in the enterprise subscription.
        var trustedIdpsSet = {};

        if (enterpriseSubscription) {

            var trustedIdps = JSON.parse(enterpriseSubscription.trustedIdps);

            for (var i = 0; i < trustedIdps.length; i++) {
                trustedIdpsSet[trustedIdps[i]] = true;
            }
        }

        for (var i = 0; i < enterprises.length; i++) {
            var viewEntry = {};
            viewEntry["enterprise"] = enterprises[i];
            viewEntry["subscribed"] = enterprises[i] in trustedIdpsSet;
            viewData.push(viewEntry);
        }

        return viewData;
    }

    var getEnterprises = function (asset) {
        var store = jagg.module("manager").getAPIStoreObj();
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        var appName = asset.attributes.overview_name;
        var appVersion = asset.attributes.overview_version;
        var appProvider = asset.attributes.overview_provider;
        var result = null;
        var issuerName = null;
        var store = jagg.module("manager").getAPIStoreObj();
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        //Check whether application author is a tenant
        if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
            result = appProvider.split("-AT-");
        }
        if (result != null) {
            issuerName = appName + "-" + result[1] + "-" + appVersion;
        } else {
            issuerName = appName + "-" + appVersion;
        }

        var ssoProviderInfo = asset.attributes.sso_ssoProvider.split("-");


        var authResult = subscriptionService.getEnterprisesForApplication(
                {appName: issuerName, ssoProviderName: ssoProviderInfo[0], ssoProviderVersion: ssoProviderInfo[1]});

        return authResult.enterprises;

    }



    types.forEach(function (type) {
        manager = store.rxtManager(type, session);
        if (query) {
            assets = store.search({
                attributes: query,
                tag: tag,
                type: type
            }, paging);
        } else if (tag) {
            assets = store.tagged(type, tag, paging);
        } else {
            assets = store.assets(type, paging);
        }


        var rxtAttributes = require('/modules/util.js').getRXTAttributes(tenantId, type);
        AuthService=require(getServiceDir('authentication.js')).serviceModule;
        authenticator=new AuthService.Authenticator();
        authenticator.init(jagg,session);
        user=authenticator.getLoggedInUser();
        if(type == "webapp") {

            var subscriptionInfo;
            assets.forEach(function (asset) {
                isSubscribed = false;
                //set subscription details for each asset
                subscriptionInfo = getSubscriptionInfo(asset)
                if (subscriptionInfo.individualSubscription) {
                    if (subscriptionInfo.individualSubscription.subscriptionStatus === "UNBLOCKED") {
                        isSubscribed = true;
                        subscriptionInfo.individualSubscription["OnHold"] = false;
                    } else if (subscriptionInfo.individualSubscription.subscriptionStatus === "ON_HOLD") {
                        subscriptionInfo.individualSubscription["OnHold"] = true;
                    } else {
                        subscriptionInfo.individualSubscription["OnHold"] = false;
                    }
                }
                asset.isSubscribed = isSubscribed;

                //to support skip gateway label visibility
                if (asset.overview_skipGateway == "true") {
                    asset.overview_skipGateway = true;
                }
                else {
                    asset.overview_skipGateway = false;
                }

            });
        }

        items.push({
            assets: assets,
            plural: manager.pluralLabel,
            singular: manager.singularLabel,
            type: manager.shortName
        });
        popularItems = popularItems.concat(store.popularAssets(type, first ? (popular + popularDiff) : popular));
        recentItems = recentItems.concat(store.recentAssets(type, first ? (recent + recentDiff) : recent));
        first = false;
    });

    caramel.render({
        title: 'Store | WSO2 Enterprise Store',
        user: user,
        sso: sso,
        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),
        navigation: site.navigation(tenantId),
        search: {
            title: "Top Assets",
            isTopAssets: true,
            searchFields: search.fields()
        },
        topAssets: {
            assets: items,
            popularAssets: popularItems
        },
        config:{
        	localIP : localIP,
        	httpsPort : httpsPort
        },
        tags: {
            url: '/assets/' + type + '?page=1&tag=',
            data: store.tags(type)
        },
        recentAssets: recentItems
        // type: type,  tag: tag,
    });
}, request, response, session);

function getServiceDir(serviceName) {
    return '/extensions/assets/webapp/services/' + serviceName;
}
%>
